分库：就是把数据拆分到不同的 MySQL 库中去，
分表：就是把数据拆分到同一个库的多张表里面。
第一，是数据量太大查询慢的问题。

这里面我们讲的「查询」其实 主要是事务中的查询和更新操作，因为 只读的查询可以通过缓存和主从分离来解决，这个我们在之前的「MySQL 如何应对高并发」的两节课中都讲过。那我们上节课也讲到过，解决查询慢，只要减少每次查询的数据总量就可以了，也就是说，分表就可以解决问题。

第二，是为了应对高并发的问题。

应对高并发的思想我们之前也说过，一个数据库实例撑不住，就把并发请求分散到多个实例中去，所以，解决高并发的问题是需要分库的。

简单地说，数据量大，就分表；并发高，就分库。

一般情况下，我们的方案都需要同时做分库分表，这时候分多少个库，多少张表，分别用预估的并发量和数据量来计算就可以了。

另外，我个人 不建议你在方案中考虑二次扩容的问题，也就是考虑未来的数据量，把这次分库分表设计的容量都填满了之后，数据如何再次分裂的问题。

现在技术和业务变化这么快，等真正到了那个时候，业务早就变了，可能新的技术也出来了，你之前设计的二次扩容方案大概率是用不上的，所以没必要为了这个而增加方案的复杂程度。还是那句话，越简单的设计可靠性越高。


1.为什么要分表和分区？
日常开发中我们经常会遇到大表的情况，所谓的大表是指存储了百万级乃至千万级条记录的表。
这样的表过于庞大，导致数据库在查询和插入的时候耗时太长，性能低下，
如果涉及联合查询的情况，性能会更加糟糕。
分表和表分区的目的就是减少数据库的负担，提高数据库的效率，通常点来讲就是提高表的增删改查效率。
 
2.什么是分表？
分表是将一个大表按照一定的规则分解成多张具有独立存储空间的实体表，
我们可以称为子表，每个表都对应三个文件，MYD数据文件，.MYI索引文件，.frm表结构文件。
这些子表可以分布在同一块磁盘上，也可以在不同的机器上。
app读写的时候根据事先定义好的规则得到对应的子表名，然后去操作它。
 
3.什么是分区？
分区和分表相似，都是按照规则分解表。
不同在于分表将大表分解为若干个独立的实体表，而分区是将数据分段划分在多个位置存放，
可以是同一块磁盘也可以在不同的机器。
分区后，表面上还是一张表，但数据散列到多个位置了。
app读写的时候操作的还是大表名字，db自动去组织分区的数据。
 
4.mysql分表和分区有什么联系呢？
（1）都能提高mysql的性高，在高并发状态下都有一个良好的表现。
（2）分表和分区不矛盾，可以相互配合的，对于那些大访问量，并且表数据比较多的表，
 我们可以采取分表和分区结合的方式，访问量不大，但是表数据很多的表，我们可以采取分区的方式等。
（3）分表技术是比较麻烦的，需要手动去创建子表，app服务端读写时候需要计算子表名。
 采用merge好一些，但也要创建子表和配置子表间的union关系。
（4）表分区相对于分表，操作方便，不需要创建子表。

转载来源：
https://blog.csdn.net/m0_66490875/article/details/133949363
https://zq99299.github.io/note-book/back-end-storage/03/01.html#%E5%A6%82%E4%BD%95%E8%A7%84%E5%88%92%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8
https://cloud.tencent.com/document/product/1003/75688
https://cloud.tencent.com/developer/article/2181007
